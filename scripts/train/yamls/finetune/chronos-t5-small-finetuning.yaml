# Make changes to be compatible with build_finetuning_dataloader and ChronosDataset

variables:
  global_seed: 17
  model_name: amazon/chronos-t5-small
  save_folder: /mnt/workdisk/kushal/llm-foundry-fork/tmp/output/chronos-t5-small-finetuning-7

  context_length: 18  # Depends on dataset
  prediction_length: 12  # Depends on dataset
  min_past: 18  # Depends on dataset

  # Run Name
  run_name:  # If left blank, will be read from env var $RUN_NAME

  max_duration: 2000ba
  save_interval: 500ba

max_seq_len: ${variables.max_seq_len}
run_name: ${variables.run_name}

# Model
model:
  name: hf_t5
  pretrained_model_name_or_path: ${variables.model_name}
  pretrained: true

# Tokenizer
tokenizer:
  name: ${variables.model_name}
  # These parameters are only applicable to ChronosTokenizerWrapper
  kwargs:
    prediction_length: ${variables.prediction_length}
    context_length: ${variables.context_length}

# Dataloaders
train_loader:
  name: timeseries
  dataset:
    # max_seq_len: ${variables.max_seq_len}
    context_length: ${variables.context_length}
    prediction_length: ${variables.prediction_length}
    min_past: ${variables.min_past}
    shuffle_buffer_length: 200_000
    max_missing_prop: 0.9
    local: /mnt/workdisk/kushal/llm-foundry-fork/tmp/tmp_data_file.arrow
    remote: /mnt/workdisk/kushal/llm-foundry-fork/tmp/data/hospital.arrow
    allow_pad_trimming: false
    decoder_only_format: false
    shuffle: true
  drop_last: true
  num_workers: 8
  pin_memory: false
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0

# There is no validation split so we skip eval_loader

# Optimization
scheduler:
  name: linear_decay_with_warmup  # linear no warmup is HF default which dolly used
  t_warmup: 0ba
  alpha_f: 0

optimizer:
  # mimic HF defaults to replicate dolly
  name: decoupled_adamw
  lr: 0.001  # original: 1.0e-5
  betas:
  - 0.9
  - 0.999
  eps: 1.0e-8
  weight_decay: 0

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: ${variables.max_duration} #1ep
eval_interval: 1  # this is the only allowed value for no eval
# eval_first: false
# eval_subset_num_batches: -1
global_train_batch_size: 32  # original: 64 (assuming 8 gpus)

# System
seed: ${variables.global_seed}
device_eval_batch_size: 32  # original: 8
device_train_microbatch_size: 32  # original: 8
# device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: true
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true

# Logging
progress_bar: true  # original: false
log_to_console: false  # original: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

loggers:
  mlflow:
    tags:
      group: 
    tracking_uri: databricks
    experiment_name: /Users/kushal.kodnad+intern@databricks.com/chronos-t5-small-experiment  # changed

# Checkpoint to local filesystem or remote object store
save_interval: ${variables.save_interval}
# save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
# save_folder: ./{run_name}/checkpoints
# save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints
save_folder: ${variables.save_folder}

# Load from remote object store
# REPLACE THE BELOW with you own checkpoint!
# load_path: oci://my-bucket/my-folder/checkpoints/some_checkpoint.pt
# load_weights_only: true  # Only load the weights, not the optimizer state, LR schedule, etc
load_weights_only: false  # Only load the weights, not the optimizer state, LR schedule, etc

save_overwrite: true # overwrite any checkpoints in the current folder; cannot be true when `autoresume: true`
# autoresume: true # autoresume from the load_path
